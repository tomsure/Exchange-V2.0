<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceAdminMethod"
			expression=" execution(* com.ruizton.main.service.*.*.*(..))" />
		<aop:advisor pointcut-ref="serviceAdminMethod" advice-ref="txAdvice" />
	</aop:config>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties"></context:property-placeholder>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
         <props>        
               <prop key="hibernate.dialect">${hibernate.dialect}</prop>          
               <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
               
               <prop key="hibernate.cache.use_second_level_cache">false</prop>  
				<prop key="hibernate.cache.use_query_cache">false</prop>  
          </props>
       </property>
       <property name="packagesToScan" value="com.ruizton.main.model"></property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxPoolSize">
			<value>${jdbc.maxPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${jdbc.minPoolSize}</value>
		</property>
		<property name="initialPoolSize">
			<value>${jdbc.initialPoolSize}</value>
		</property>
		<property name="maxIdleTime">
			<value>${jdbc.maxIdleTime}</value>
		</property>
				<property name="testConnectionOnCheckin">
			<value>true</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>true</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>18000</value>
		</property>
	</bean>

	<bean id="constantMap" class="com.ruizton.main.comm.ConstantMap" scope="singleton" init-method="init"></bean>
	<bean id="validateMap" class="com.ruizton.main.comm.ValidateMap" scope="singleton"></bean>
	<bean id="taskList" class="com.ruizton.main.auto.TaskList" scope="singleton" init-method="init"/>
	<!-- tasks -->
	<bean class="com.ruizton.main.auto.AutoSendMessage" id="sendMessageTask"></bean>
	<bean class="com.ruizton.main.auto.AutoSendMail" id="sendMailTask"></bean>
	<!--发送验证短信 -->
	<bean id="scheduleSendMessageTask" class="org.springframework.scheduling.timer.ScheduledTimerTask">   
	<property name="timerTask" ref="sendMessageTask" />
	<property name="period" >
	<value>1000</value>
	</property>
	</bean>
	<!--发送验证邮件 -->
 	<bean id="scheduleSendMailTask" class="org.springframework.scheduling.timer.ScheduledTimerTask">   
	<property name="timerTask" ref="sendMailTask" />
	<property name="delay">
	<value>1000</value>
	</property>
	<property name="period" >
	<value>1000</value>
	</property>
	</bean>

	
<bean class="org.springframework.scheduling.timer.TimerFactoryBean">
	<property name="scheduledTimerTasks">
	   <list>
			<ref bean="scheduleSendMessageTask"/>
	   </list>
	</property>
	</bean>
 	<bean class="org.springframework.scheduling.timer.TimerFactoryBean">   
	<property name="scheduledTimerTasks">
	   <list>
			<ref bean="scheduleSendMailTask"/>
	   </list>
	</property>
	</bean>

	<context:annotation-config />

	<context:component-scan base-package="com.ruizton.main.controller" />
	<context:component-scan base-package="com.ruizton.main.service" />
	<context:component-scan base-package="com.ruizton.main.dao" />
	
	<context:component-scan base-package="com.ruizton.main.controller.front" />
	<context:component-scan base-package="com.ruizton.main.service.front" />
	<context:component-scan base-package="com.ruizton.main.controller.admin" />
	<context:component-scan base-package="com.ruizton.main.service.admin" />
	
	<context:component-scan base-package="com.ruizton.main.auto" />
	<mvc:annotation-driven />


    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">    
	  <property name="maxTotal"  value="${redis.maxTotal}" /> 
	     <property name="maxIdle" value="${redis.maxIdle}" /> 
	     <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
	        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
	        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
	 </bean>

    <bean id="connectionFactory"
         class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
          <property name="poolConfig" ref="poolConfig" />
          <property name="port" value="${redis.port}" />
          <property name="hostName" value="${redis.host}" />
          <property name="password" value="${redis.password}" />
          <property name="timeout" value="${redis.timeout}" ></property>
    </bean >
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
          <property name="connectionFactory" ref="connectionFactory" />
          <property name="keySerializer" >
              <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
          </property>
          <property name="valueSerializer" >
              <bean
                  class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
          </property>
    </bean >
    <bean id="redisUtil" class="com.ruizton.main.service.comm.redis.RedisUtil" >
          <property name="redisTemplate" ref="redisTemplate" />
    </bean >
    
    <bean id="methodCacheInterceptor" class="com.ruizton.main.service.comm.redis.MethodCacheInterceptor" >
          <property name="redisUtil" ref="redisUtil" />
    </bean >
    <bean id="methodCachePointCut"
         class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" >
          <property name="advice" >
              <ref local="methodCacheInterceptor" />
          </property>
          <property name="patterns" >
              <list>
                  <!-- 需要缓存的方法 正则表达式 -->
                  <value>com.ruizton.main.service.front.FtradeMappingService.findFtrademapping</value >
                  <value>com.ruizton.main.service.front.FtradeMappingService.findFtrademapping2</value >
                  <value>com.ruizton.main.service.front.UtilsService.list101</value >
                  <value>com.ruizton.main.service.front.UtilsService.list1</value >
                  <value>com.ruizton.main.service.front.UtilsService.list5</value >
                  <value>com.ruizton.main.service.front.FrontOthersService.findFabout</value >
                  <value>com.ruizton.main.service.front.FrontOthersService.findFarticleById</value >
                  <value>com.ruizton.main.service.front.FrontOthersService.findFarticle</value >
                  <value>com.ruizton.main.service.front.FrontOthersService.findFarticleCount</value >
                  <value>com.ruizton.main.service.admin.AboutService.list</value >
                  <value>com.ruizton.main.service.admin.ArticleService.list</value >
                  <value>com.ruizton.main.service.front.FtradeMappingService.findActiveTradeMappingByFB</value >
                  <value>com.ruizton.main.service.front.FrontOthersService.findFarticleTypeAll</value >
              </list>
          </property>
    </bean >
    
    <bean class="com.ruizton.main.service.comm.listener.RedisMQHandler" ></bean>
    <bean class="com.ruizton.main.service.comm.listener.MessageSender" ></bean>
    <bean class="com.ruizton.main.service.comm.listener.MessageSubscriptor" ></bean>
    

</beans>